“You can set a more customized environment in Travis CI by using the sudo and dist fields in the YML script.”

1. You can use Ubuntu Precise infrastructure by using the following entries in the Travis YML script:”

“sudo: enabled
dist: precise”

2. To “set the default infrastructure”

sudo: false


3. You can use Ubuntu Trusty infrastructure by using the following entries in the Travis YML script:

sudo: enabled
dist: trusty”

4. “You can use container based infrastructure by using the following entries in the Travis YML script:

sudo: false
dist: trusty”

5. “You can use macOS infrastructure by using the following entry in the Travis YML script:

os: osx”

6. “The build life cycle”

“Here is the complete life cycle for Travis CI:

a. Optional install: apt addons
b. Optional install: cache components
c. before_install
d. install
e. before_script
f. script
g. Optional: before_cache
h. after_success or after_failure
i. before_deploy
j. deploy
k. after_deploy
l. after_script”

7. Build failure behavior

If an error occurs in the before_install, install, or before_script life cycle events then the CI build will immediately error out and the CI build will stop.

If an error occurs in the script life cycle event then the build will fail but the CI build will continue to run.

If an error occurs in the after_success, after_failure, after_script, and after_deploy life cycle events then the build will not be marked as a failure but if any of these life cycle events results in a timeout then the build will be marked as a failure.”

8. “You can easily install another programming language in the CI build by adding an entry into the before_install life cycle event. It is best to specify your primary language and then a secondary language.”

Example:
“In the Travis CI YML script here, we specify Go version 1.10 as the primary programming language and then Node.js as the secondary language. We install Node.js dependencies in the before_install life cycle event and then we run a Golang test followed by a Node.js test:

language: go

go: 
    - "1.10"

env:
    - NODE_VERSION="6"

before_install:
    - nvm install $NODE_VERSION

install:
    - npm install

script:
    - go test
    - npm test

If you would like to further explore this example, then check out the multiple-languages repository (https://github.com/packtci/multiple-languages).”

9. 
“Docker can be utilized in Travis CI and the only step required to enable Docker is to add the following entry into your Travis CI YML script:

sudo: required

services:
    - docker”
 
 “Example Travis CI YML script with a Dockerfile”
 
 “In the Travis YML script here, we are specifying sudo privileges, a programming language of Golang, then we are specifying the Docker service, pulling down a custom Docker image of jbelmont/print-average:1.0 and then running the Docker container and removing it:

sudo: required

language: go

services:
  - docker

before_install:
  - docker pull jbelmont/print-average:1.0

script:
  - docker run --rm jbelmont/print-average:1.0”


Example 2:

“language: node_js

node_js:
 - "8.11"

dist: trusty

sudo: false

addons:
 chrome: stable

before_install:
 - google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &

cache:
 directories:
 - node_modules

install:
 - npm install

script:
 - npm test”

“In the Travis YML script here, we have set a number of different actions in the Travis CI build. First, we set the language to node_js, then we set the version of node_js to 8.11, then we set a new property called dist: trusty which set the Travis CI environment to Ubuntu 14.04, which is called Trusty. We then use the add-ons block to add the latest stable Chrome version. We then get the stable version of Google Chrome running on the CI build on port 9222, and then we use the cache block so that node_modules is cached on each CI build run. Then we install our Node.js dependencies and finally we run the Node.js tests using the Jest library:”

Note: you can find the source code for this repository at https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script and at GitHub.”

“Questions

What is the primary difference between Jenkins and Travis CI?
Can Travis CI work in Bitbucket?
How do you add new repositories to Travis CI?
What is a scalar variable in YAML?
What is a list in YAML?
Why are anchors useful in YAMl?
Is it possible to use a secondary programming language in a Travis CI build?
How would you use docker in a Travis CI build?”

